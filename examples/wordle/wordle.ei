include colorutil
include stringutil

dataclass CharType
    let readonly Correct = 0
    let readonly Contains = 1
    let readonly None = 2
end

class GuessChar 
    let c
    let t

    func new(_c, _t)
        this.c = _c
        this.t = _t
    end
end

let readonly Words = fread("words.txt")
let readonly WordCount = 14855
let readonly SingleWordLength = 5
let readonly MaxGuessCount = 6

let word = ""

let wordIdx = int(rand() * (WordCount - 1))
let startIdx = wordIdx * (SingleWordLength + 1)

for i = startIdx to startIdx + SingleWordLength do 
    word += Words[i]
end

let guesses = []

for y = 0 to MaxGuessCount do
    let line = []
    for x = 0 to SingleWordLength do
        line += GuessChar("*", 2)
    end
    guesses += [line]
end

func printGame(guess)
    ColorUtil.SetBackgroundColor(Colors.Black)
    cls()

    ColorUtil.SetForegroundColor(Colors.Green)
    emitln("EIWORDLE\n")
    ColorUtil.SetForegroundColor(Colors.White)

    for pg = 0 to guess do
        emit((pg + 1).asString + ". ")

        for pc = 0 to SingleWordLength do
            let n_color

            if guesses[pg][pc].t ?= CharType.Correct then
                n_color = Colors.Green
            elif guesses[pg][pc].t ?= CharType.Contains then
                n_color = Colors.Yellow
            else
                n_color = Colors.Red
            end

            ColorUtil.SetForegroundColor(n_color)
            emit(guesses[pg][pc].c)
            ColorUtil.SetForegroundColor(Colors.White)
        end
        emitln("")
    end
end

func countChars(word, counts)
    for i = 0 to SingleWordLength do
        counts[word[i] - ascii("a")] += 1
    end
end

func processGuess(word, input, guess)
    let counts = 26 @ 0
    let marked = SingleWordLength @ false

    for i = 0 to 5 do
        if input[i] ?= word[i] then
            guesses[guess][i] = GuessChar((input[i]), CharType.Correct)
            marked[i] = true
        else
            guesses[guess][i] = GuessChar((input[i]), CharType.None)
        end
    end

    for i = 0 to 5 do
        counts[ascii(word[i]) - 97] += 1
    end
    for i = 0 to 5 do
        if input[i] ?= word[i] then
            counts[ascii(word[i]) - 97] -= 1
        end
    end
    for i = 0 to 5 do
        if (not marked[i]) then
            if StringUtil.Contains(word, input[i]) then
                if counts[ascii(input[i]) - 97] > 0 then
                    guesses[guess][i] = GuessChar(guesses[guess][i].c, CharType.Contains)
                    counts[ascii(input[i]) - 97] -= 1
                end
            end
        end
    end
end

printGame(0)

for guess = 0 to MaxGuessCount do
    let input = ""

    while true do
        emit((guess + 1).asString + ". ")
        input = in()

        if input.length != SingleWordLength then
            emitln("Not right size!")
        else brk end
    end

    processGuess(word, input, guess)

    printGame(guess + 1)

    if input ?= word then brk end
end

emitln("The word was " + word)
~ Eiger Standard Math Library

dataclass math ~ Declare a namespace
	~ Mathematical Constants
	pi = 3.14159265358979323846
	e = 2.718281828459045

	~ get the unsigned value of a number
	func abs(n)
		if n < 0 then
			ret -n
		else
			ret m
		end
	end

	~ get the square root of a number
	func sqrt(n)
		ret n ^ 0.5
	end

	~ get exponentiation of two functions
	func pow(b, e)
		ret b ^ e
	end

	~ get remainder of two numbers
	func mod(a, b)
		ret a % b
	end

	~ get factorial of a number using recursion
	func factorial(n)
		if n ?= 0 then
			ret 1
		else
			ret n * factorial(n - 1)
		end
	end

	~ Improved sine function using a higher-order Taylor series
	func sin(x)
		~ Normalize the angle to the range [0, 2*pi)
		two_pi = 2 * pi
		x = x % two_pi

		~ Handle negative angles
		if x < 0 then
			x += two_pi
		end

		~ Determine the sign based on the angle's quadrant
		sign = 1
		if x > pi then
			x = x - pi
			sign = -1
		end

		~ Use Taylor series expansion for sine
		result = 0
		power = x
		fact = 1
		sign_toggle = 1

		for i = 0 to 10 do
			~ Taylor series term
			term = sign_toggle * (power / fact)

			~ Add term to result
			result += term

			~ Prepare for next term
			sign_toggle = -sign_toggle
			power *= pow(x, 2)
			fact *= pow(2 * i + 2, 2)
		end

		ret sign * result
	end

	func cos(n)
		ret sin(pi / 2 - n)
	end
end